#!/usr/bin/env node
/* eslint-disable no-use-before-define */

/**
 * Module dependencies.
 */

const dotenv = require('dotenv');
const debug = require('debug')('api:server');
const http = require('http');
const path = require('path');
const createError = require('http-errors');
const socketio = require('../utils/socketio');
const { createPeerServer } = require('../utils/peer-server');

const app = require('../app');

dotenv.config({ path: path.join(__dirname, '../', '.env') });

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const socketServer = http.createServer(app);

/**
 * Initialize socket io
 */
socketio.init(socketServer);

const peerServer = http.createServer(app);
const expressPeerServer = createPeerServer(server);
app.use('/peers', expressPeerServer);

// catch 404 and forward to error handler
app.use((req, res, next) => {
  next(createError(404));
});

// error handler
app.use((err, req, res) => {
  // eslint-disable-next-line no-console
  console.log(err.message);

  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
peerServer.listen(9440);
socketServer.listen(9441);
server.on('error', onError);
server.on('listening', onListening);

socketServer.on('error', onError);
socketServer.on('listening', onLSocketistening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const parsedPort = parseInt(val, 10);

  if (Number.isNaN(parsedPort)) {
    // named pipe
    return val;
  }

  if (parsedPort >= 0) {
    // parsedPort number
    return parsedPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

function onLSocketistening() {
  const addr = socketServer.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
